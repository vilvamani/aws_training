AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates a Multi-AZ, multi-subnet VPC infrastructure with managed NAT
  gateways in the public subnet for each Availability Zone. You can also create additional
  private subnets with dedicated custom network access control lists (ACLs). If you
  deploy the Quick Start in a region that doesn't support NAT gateways, NAT instances
  are deployed instead. **WARNING** This template creates AWS resources. You will
  be billed for the AWS resources used if you create a stack from this template. (qs-1qnnspaap)

Metadata:
  QuickStartDocumentation:
    EntrypointName: "Launch a New VPC"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS Environment Details
        Parameters:
          - StackEnv
      - Label:
          default: AWS Network Configuration
        Parameters:
          - NumberOfAZs
          - NumberOfIPs
          - VPCCIDR
          - VPCTenancy
          - CreateNATGateways
          - CreateS3VPCEndPoint
    ParameterLabels:
      StackEnv:
        default: Name of the Environment
      NumberOfAZs:
        default: Number of Availability Zones
      NumberOfIPs:
        default: Number of required IP address per subnet
      VPCCIDR:
        default: VPC CIDR
      VPCTenancy:
        default: VPC Tenancy
      CreateNATGateways:
        default: Do you want to craete NAT Gateway?
      CreateS3VPCEndPoint:
        default: Do you want to craete S3 VPC Endpoint?

Mappings: 
  IPRange: 
    '256': 
      cidrBits: 8
    '512': 
      cidrBits: 9
    '1024': 
      cidrBits: 10
    '2048': 
      cidrBits: 11
    '4096': 
      cidrBits: 12

Parameters:
  StackEnv:
    AllowedValues:
      - 'demo'
      - 'training'
      - 'workshop'
      - 'dev'
      - 'test'
      - 'stage'
      - 'production'
    Default: 'training'
    Description: Name of the AWS Environment
    Type: String

  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
      - '4'
    Default: '3'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String

  NumberOfIPs:
    AllowedValues:
      - '256'
      - '512'
      - '1024'
      - '2048'
    Default: '1024'
    Description: Number of IP address per Subnet
    Type: String

  VPCCIDR:
    #AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-18
    Default: 100.0.0.0/16
    Description: CIDR block parameter must be in the form x.x.x.x/16-18
    Type: String

  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String

  CreateNATGateways:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to false when creating only private subnets. If True, both CreatePublicSubnets and CreatePrivateSubnets must also be true.
    Type: String

  CreateS3VPCEndPoint:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set to True, if you want to communicate with s3 in private network.
    Type: String
    

Conditions:
  3AZCondition: !Or
    - !Equals
      - !Ref 'NumberOfAZs'
      - '3'
    - !Condition '4AZCondition'
  4AZCondition: !Equals
    - !Ref 'NumberOfAZs'
    - '4'
  NVirginiaRegionCondition: !Equals
    - !Ref 'AWS::Region'
    - us-east-1
  NATGatewaysCondition: !Equals
    - !Ref 'CreateNATGateways'
    - 'true'
  S3EndPointCondition: !Equals
    - !Ref 'CreateS3VPCEndPoint'
    - 'true'

Resources:
  #Create new DHCP Option Set in AWS Cloud
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If
        - NVirginiaRegionCondition
        - ec2.internal
        - !Sub '${AWS::Region}.compute.internal'
      DomainNameServers:
        - AmazonProvidedDNS

  #Create new VPC in AWS Cloud
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      InstanceTenancy: !Ref 'VPCTenancy'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-vpc"
  
  #Associate newly created DHCP Option Set to VPC
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref 'VPC'
      DhcpOptionsId: !Ref 'DHCPOptions'

  #Create new Internet Gateway in AWS Cloud
  InternetGateway:
    #Condition: PublicSubnetsCondition
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-igw"

  #Attach newly created Internet Gateway to VPC
  VPCGatewayAttachment:
    #Condition: PublicSubnetsCondition
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  #Create new Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-publicsubnet1"
        - Key: Network
          Value: Public
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '1'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-publicsubnet2"
        - Key: Network
          Value: Public
  PublicSubnet3:
    Condition: 3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '2'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-publicsubnet3"
        - Key: Network
          Value: Public
  PublicSubnet4:
    Condition: 4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - '3'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-publicsubnet4"
        - Key: Network
          Value: Public

  #Create Route Table for Public Subnet
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-public-routetable"
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet3RouteTableAssociation:
    Condition: 3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet3'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnet4RouteTableAssociation:
    Condition: 4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet4'
      RouteTableId: !Ref 'PublicSubnetRouteTable'

  #Create new Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      AvailabilityZone: !Select
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-privatesubnet1"
        - Key: Network
          Value: Private
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      AvailabilityZone: !Select
        - '1'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-privatesubnet2"
        - Key: Network
          Value: Private
  PrivateSubnet3:
    Condition: 3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      AvailabilityZone: !Select
        - '2'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-privatesubnet3"
        - Key: Network
          Value: Private
  PrivateSubnet4:
    Condition: 4AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !Select [ 7, !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ], !FindInMap [ IPRange, !Ref NumberOfIPs, cidrBits ] ]]
      AvailabilityZone: !Select
        - '3'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-privatesubnet4"
        - Key: Network
          Value: Private

  #Create Elatic Static IP Address for NAT Gateway
  NAT1EIP:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-nateip1"

  #Create NAT Gateway
  NATGateway:
    Condition: NATGatewaysCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NAT1EIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-natgateway"

  #Create Route Table for Private Subnet
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-private-routetable"
        - Key: Network
          Value: Private
  PrivateSubnetRoute:
    Condition: NATGatewaysCondition
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway'
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateSubnetRouteTable'
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateSubnetRouteTable'
  PrivateSubnet3RouteTableAssociation:
    Condition: 3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet3'
      RouteTableId: !Ref 'PrivateSubnetRouteTable'
  PrivateSubnet4RouteTableAssociation:
    Condition: 4AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet4'
      RouteTableId: !Ref 'PrivateSubnetRouteTable'

  S3VPCEndpoint:
    Condition: S3EndPointCondition
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub "${StackEnv}-s3vpc-endpoint"
Outputs:
  VPCID:
    Value: !Ref 'VPC'
    Description: VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  VPCCIDR:
    Value: !Ref 'VPCCIDR'
    Description: VPC CIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCIDR'

  InternetGatewayID:
    Value: !Ref 'InternetGateway'
    Description: Internet Gateway ID
    Export:
      Name: !Sub '${AWS::StackName}-INTERNETGATEWAYID'

  PublicSubnet1ID:
    Value: !Ref 'PublicSubnet1'
    Description: Public Subnet One
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1ID'

  PublicSubnet2ID:
    Value: !Ref 'PublicSubnet2'
    Description: Public Subnet Two
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2ID'

  PublicSubnet3ID:
    Condition: 3AZCondition
    Value: !Ref 'PublicSubnet1'
    Description: Public Subnet Three
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3ID'

  PublicSubnet4ID:
    Condition: 4AZCondition
    Value: !Ref 'PublicSubnet4'
    Description: Public Subnet Four
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet4ID'

  PublicSubnetRouteTable:
    Value: !Ref 'PublicSubnetRouteTable'
    Description: Public Subnet Route Table
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetRouteTable'
  
  PrivateSubnet1ID:
    Value: !Ref 'PrivateSubnet1'
    Description: Private Subnet One
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1ID'

  PrivateSubnet2ID:
    Value: !Ref 'PrivateSubnet2'
    Description: Private Subnet Two
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2ID'

  PrivateSubnet3ID:
    Condition: 3AZCondition
    Value: !Ref 'PrivateSubnet1'
    Description: Private Subnet Three
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3ID'

  PrivateSubnet4ID:
    Condition: 4AZCondition
    Value: !Ref 'PrivateSubnet4'
    Description: Private Subnet Four
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet4ID'

  PrivateSubnetRouteTable:
    Value: !Ref 'PrivateSubnetRouteTable'
    Description: Private Subnet Route Table
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetRouteTable'

  NAT1EIP:
    Condition: NATGatewaysCondition
    Description: Elastic Static IP address for NAT
    Value: !Ref 'NAT1EIP'
    Export:
      Name: !Sub '${AWS::StackName}-NAT1EIP'

  NATGateway:
    Condition: NATGatewaysCondition
    Value: !Ref 'NATGateway'
    Description: NAT Gatway
    Export:
      Name: !Sub '${AWS::StackName}-NATGateway'

  S3VPCEndpoint:
    Condition: S3EndPointCondition
    Value: !Ref 'S3VPCEndpoint'
    Description: VPC Endpoint for s3
    Export:
      Name: !Sub '${AWS::StackName}-S3VPCEndpointID'